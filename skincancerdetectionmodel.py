# -*- coding: utf-8 -*-
"""SkinCancerDetectionModel

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rjLMvhg9A642Vhx45NEgABbeKIjOTxj3
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("kmader/skin-cancer-mnist-ham10000")

print("Path to dataset files:", path)

import os

base_path = "/root/.cache/kagglehub/datasets/kmader/skin-cancer-mnist-ham10000/versions/2"
for root, dirs, files in os.walk(base_path):
    for name in files:
        print(os.path.join(root, name))

import pandas as pd

# Path to metadata CSV
csv_path = os.path.join(base_path, "HAM10000_metadata.csv")
df = pd.read_csv(csv_path)

# Filter for only melanoma and nv
df = df[df['dx'].isin(['melanoma', 'nv'])].reset_index(drop=True)
print("Filtered dataset size:", df.shape)

# Map labels to numeric (melanoma = 1, nv = 0)
df['label'] = df['dx'].map({'melanoma': 1, 'nv': 0})
df.head()

# Add full image paths
def get_img_path(img_id):
    if os.path.exists(os.path.join(base_path, "HAM10000_images_part_1", f"{img_id}.jpg")):
        return os.path.join(base_path, "HAM10000_images_part_1", f"{img_id}.jpg")
    else:
        return os.path.join(base_path, "HAM10000_images_part_2", f"{img_id}.jpg")

df['image_path'] = df['image_id'].apply(get_img_path)

# Verify
df[['image_id', 'dx', 'label', 'image_path']].head()

import os

base_path = "/root/.cache/kagglehub/datasets/kmader/skin-cancer-mnist-ham10000/versions/2"

print("Folders in base path:")
print(os.listdir(base_path))

img_dir1 = os.path.join(base_path, "HAM10000_images_part_1")
img_dir2 = os.path.join(base_path, "HAM10000_images_part_2")

print("Part 1 sample images:", os.listdir(img_dir1)[:5])
print("Part 2 sample images:", os.listdir(img_dir2)[:5])

df = pd.read_csv(os.path.join(base_path, "HAM10000_metadata.csv"))

# Attach image path column
def get_img_path(img_id):
    path1 = os.path.join(base_path, "HAM10000_images_part_1", f"{img_id}.jpg")
    path2 = os.path.join(base_path, "HAM10000_images_part_2", f"{img_id}.jpg")
    return path1 if os.path.exists(path1) else path2

df['img_path'] = df['image_id'].apply(get_img_path)

# Check first few rows
df[['image_id', 'img_path']].head()

import os
import shutil
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.utils import class_weight

# Paths
base_path = "/root/.cache/kagglehub/datasets/kmader/skin-cancer-mnist-ham10000/versions/2"
csv_path = os.path.join(base_path, "HAM10000_metadata.csv")
img_dir1 = "HAM10000_images_part_1"
img_dir2 = "HAM10000_images_part_2"
output_dir = "skin_cancer_dataset"

# Create label folders
labels = ['melanoma', 'normal']
for split in ['train', 'val']:
    for label in labels:
        os.makedirs(os.path.join(output_dir, split, label), exist_ok=True)

# Load CSV
df = pd.read_csv(csv_path)

# Label melanoma vs normal
melanoma_labels = ['mel', 'bcc', 'akiec']  # you can update this list as needed
df['label'] = df['dx'].apply(lambda x: 'melanoma' if x in melanoma_labels else 'normal')

# Get full image paths
def get_img_path(img_id):
    path1 = os.path.join(base_path, img_dir1, f"{img_id}.jpg")
    path2 = os.path.join(base_path, img_dir2, f"{img_id}.jpg")
    return path1 if os.path.exists(path1) else path2

df['img_path'] = df['image_id'].apply(get_img_path)

# Remove rows with missing image paths
df = df[df['img_path'].apply(os.path.exists)]

# Split into train/val
train_df, val_df = train_test_split(df, stratify=df['label'], test_size=0.2, random_state=42)

# Compute class weights for training later
class_weights = class_weight.compute_class_weight(
    class_weight='balanced',
    classes=np.unique(train_df['label']),
    y=train_df['label']
)
class_weights_dict = dict(zip(np.unique(train_df['label']), class_weights))
print("Class weights:", class_weights_dict)

# Copy files
def copy_images(subset_df, split):
    for _, row in subset_df.iterrows():
        dest = os.path.join(output_dir, split, row['label'], f"{row['image_id']}.jpg")
        shutil.copy(row['img_path'], dest)

copy_images(train_df, 'train')
copy_images(val_df, 'val')

print("✅ Dataset prepared in 'skin_cancer_dataset/'")

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.optimizers import Adam
import os

# Paths
data_dir = "skin_cancer_dataset"
img_size = (224, 224)
batch_size = 32

# Load data using ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    horizontal_flip=True
)
val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    os.path.join(data_dir, "train"),
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary"
)

val_generator = val_datagen.flow_from_directory(
    os.path.join(data_dir, "val"),
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary"
)

# Build model using MobileNetV2
base_model = MobileNetV2(input_shape=(224, 224, 3), include_top=False, weights='imagenet')
base_model.trainable = False  # Freeze the base

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.3)(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.2)(x)
predictions = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=predictions)
model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

# ⚖️ Class weights from dataset preparation step
class_weights_dict = {'melanoma': 2.0, 'normal': 0.5}  # Replace with your actual printed weights

# Map class indices to match train_generator
mapped_class_weights = {
    train_generator.class_indices[label]: weight
    for label, weight in class_weights_dict.items()
}

# Train
model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=10,
    class_weight=mapped_class_weights
)

# Save the model
model.save("melanoma_classifier_fixed.h5")
print("✅ Model saved as 'melanoma_classifier_fixed.h5'")

from google.colab import files
files.download("melanoma_classifier_fixed.h5")